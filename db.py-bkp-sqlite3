
######################################################## THIS CODE WAS USING FOR SQLITE3 DATABASE ########################################################
# import sqlite3
# from datetime import datetime
# from decimal import Decimal
# from mail_sender import send_email

# # Database connection setup
# def connect_db():
#     return sqlite3.connect('database.db')

# def create_table():
#     conn = connect_db()
#     cur = conn.cursor()
#     create_table_query = '''
#     CREATE TABLE IF NOT EXISTS nifty50_stocks (
#         id INTEGER PRIMARY KEY AUTOINCREMENT,
#         company_name TEXT,
#         industry TEXT,
#         symbol TEXT UNIQUE,
#         price REAL,
#         market_cap REAL,
#         promoters_holdings REAL,
#         dll REAL,
#         fll REAL,
#         government REAL,
#         public REAL,
#         no_of_shares REAL,
#         is_visible BOOLEAN DEFAULT FALSE,
#         created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
#         last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
#     );
#     '''
#     cur.execute(create_table_query)
#     conn.commit()
#     cur.close()
#     conn.close()

# def create_news_table():
#     conn = connect_db()
#     cur = conn.cursor()
#     create_table_query = '''
#     CREATE TABLE IF NOT EXISTS news (
#         id INTEGER PRIMARY KEY AUTOINCREMENT,
#         stock_id INTEGER,
#         heading TEXT NOT NULL,
#         description TEXT NOT NULL,
#         created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
#         FOREIGN KEY(stock_id) REFERENCES nifty50_stocks(id)
#     );
#     '''
#     cur.execute(create_table_query)
#     conn.commit()
#     cur.close()
#     conn.close()

# def insert_stock_data(stock_data):
#     conn = connect_db()
#     cur = conn.cursor()

#     fetch_query = '''
#     SELECT id, market_cap, promoters_holdings, dll, fll, government, public, no_of_shares
#     FROM nifty50_stocks
#     WHERE symbol = ?;
#     '''

#     insert_query = '''
#     INSERT INTO nifty50_stocks (
#         company_name, industry, symbol, price, market_cap, promoters_holdings,
#         dll, fll, government, public, no_of_shares, created_dt, last_updated, is_visible
#     ) VALUES (
#         :Company_Name, :Industry, :Symbol, :Price, :Market_Cap,
#         :Promoters_Holdings, :DLL, :FLL, :Government, :Public, :No_of_Shares, :Date, :Last_Updated, :is_visible
#     )
#     ON CONFLICT(symbol) DO UPDATE SET
#         price = excluded.price,
#         market_cap = excluded.market_cap,
#         promoters_holdings = excluded.promoters_holdings,
#         dll = excluded.dll,
#         fll = excluded.fll,
#         government = excluded.government,
#         public = excluded.public,
#         no_of_shares = excluded.no_of_shares,
#         last_updated = excluded.last_updated,
#         is_visible = excluded.is_visible
#     RETURNING id, symbol;
#     '''

#     news_insert_query = '''
#     INSERT INTO news (stock_id, heading, description, created_dt)
#     VALUES (?, ?, ?, ?);
#     '''

#     inserted_records_count = 0
#     updated_records_count = 0

#     for stock in stock_data:
#         stock['Date'] = datetime.now()
#         stock['Last_Updated'] = datetime.now()

#         cur.execute(fetch_query, (stock['Symbol'],))
#         existing_data = cur.fetchone()

#         if existing_data:
#             stock_id, existing_market_cap, existing_promoters_holdings, existing_dll, existing_fll, existing_government, existing_public, existing_no_of_shares = existing_data
            
#             message_parts = []
#             is_visible = False

#             if stock['Market_Cap'] is not None and existing_market_cap is not None:
#                 if stock['Market_Cap'] != existing_market_cap:
#                     if stock['Market_Cap'] < existing_market_cap:
#                         message_parts.append(f"Market Cap value <span class='bear'>decreased</span>, Prev: {existing_market_cap:.0f} Last: {stock['Market_Cap']:.0f}")
#                     else:
#                         message_parts.append(f"Market Cap value <span class='bull'>increased</span>, Prev: {existing_market_cap:.0f} Last: {stock['Market_Cap']:.0f}")
#                         is_visible = True

#             if stock['Promoters_Holdings'] is not None and existing_promoters_holdings is not None:
#                 if stock['Promoters_Holdings'] != existing_promoters_holdings:
#                     if stock['Promoters_Holdings'] < existing_promoters_holdings:
#                         message_parts.append("Promoters holdings <span class='bear'>decreased</span>, Prev: " + str(existing_promoters_holdings) + " Last: " + str(stock['Promoters_Holdings']))
#                     else:
#                         message_parts.append("Promoters holdings <span class='bull'>increased</span>, Prev: " + str(existing_promoters_holdings) + " Last: " + str(stock['Promoters_Holdings']))
#                         is_visible = True

#             if stock['DLL'] is not None and existing_dll is not None:
#                 if stock['DLL'] != existing_dll:
#                     if stock['DLL'] < existing_dll:
#                         message_parts.append("DLL holding <span class='bear'>decreased</span>, Prev: " + str(existing_dll) + " Last: " + str(stock['DLL']))
#                     else:
#                         message_parts.append("DLL holding <span class='bull'>increased</span>, Prev: " + str(existing_dll) + " Last: " + str(stock['DLL']))
#                         is_visible = True

#             if stock['FLL'] is not None and existing_fll is not None:
#                 if stock['FLL'] != existing_fll:
#                     if stock['FLL'] < existing_fll:
#                         message_parts.append("FLL holding <span class='bear'>decreased</span>, Prev: " + str(existing_fll) + " Last: " + str(stock['FLL']))
#                     else:
#                         message_parts.append("FLL holding <span class='bull'>increased</span>, Prev: " + str(existing_fll) + " Last: " + str(stock['FLL']))
#                         is_visible = True

#             if stock['Government'] is not None and existing_government is not None:
#                 if stock['Government'] != existing_government:
#                     if stock['Government'] < existing_government:
#                         message_parts.append("Government holding <span class='bear'>decreased</span>, Prev: " + str(existing_government) + " Last: " + str(stock['Government']))
#                     else:
#                         message_parts.append("Government holding <span class='bull'>increased</span>, Prev: " + str(existing_government) + " Last: " + str(stock['Government']))
#                         is_visible = True

#             if stock['Public'] is not None and existing_public is not None:
#                 if stock['Public'] != existing_public:
#                     if stock['Public'] < existing_public:
#                         message_parts.append("Public holding <span class='bear'>decreased</span>, Prev: " + str(existing_public) + " Last: " + str(stock['Public']))
#                     else:
#                         message_parts.append("Public holding <span class='bull'>increased</span>, Prev: " + str(existing_public) + " Last: " + str(stock['Public']))
#                         is_visible = True

#             if stock['No_of_Shares'] is not None and existing_no_of_shares is not None:
#                 if stock['No_of_Shares'] != existing_no_of_shares:
#                     if stock['No_of_Shares'] < existing_no_of_shares:
#                         message_parts.append("No of Shareholders <span class='bear'>decreased</span>, Prev: " + str(existing_no_of_shares) + " Last: " + str(stock['No_of_Shares']))
#                     else:
#                         message_parts.append("No of Shareholders <span class='bull'>increased</span>, Prev: " + str(existing_no_of_shares) + " Last: " + str(stock['No_of_Shares']))
#                         is_visible = True

#             if message_parts:
#                 updated_records_count += 1
#                 heading = f"Alert for {stock['Symbol']}"
#                 description = "\n ".join(message_parts)
#                 created_dt = datetime.now()
#                 cur.execute(news_insert_query, (stock_id, heading, description, created_dt))
#                 print(f'Updated News for : {stock["Symbol"]}')

#             stock['is_visible'] = is_visible
#             cur.execute(insert_query, stock)
#             result = cur.fetchone()
#             if result:
#                 print(f'Updated stock for : {stock["Symbol"]}')
#         else:
#             stock['is_visible'] = True
#             cur.execute(insert_query, stock)
#             result = cur.fetchone()
#             if result:
#                 inserted_records_count += 1
#                 print(f'Inserted stock for : {stock["Symbol"]}')

#     conn.commit()
#     cur.close()
#     conn.close()

#     # result = send_email('ramesh@capsquery.com', 'Hello..')
#     # print(result)
#     return inserted_records_count, updated_records_count

# def get_all_stocks():
#     conn = connect_db()
#     cur = conn.cursor()
#     cur.execute("SELECT company_name,symbol, promoters_holdings, fll, dll, government, public, no_of_shares FROM nifty50_stocks WHERE is_visible=true order by id asc;")
#     stocks = cur.fetchall()
#     cur.close()
#     conn.close()
#     return stocks

# def get_all_news():
#     conn = connect_db()
#     cur = conn.cursor()
#     cur.execute("SELECT * FROM news order by id desc limit 50;")
#     news = cur.fetchall()
#     cur.close()
#     conn.close()
#     return news

# # Ensure the table is created when the module is imported
# create_table()
# create_news_table()

# # # Example usage
# # stock_data = [{
# #     'Company_Name': 'Tata Consultancy Services Ltd.',
# #     'Industry': 'IT Services & Consulting',
# #     'Symbol': 'TCS',
# #     'Price': 200.00,
# #     'Market_Cap': 1000000.00,
# #     'Promoters_Holdings': 50.00,
# #     'DLL': 20.00,
# #     'FLL': 10.00,
# #     'Government': 5.00,
# #     'Public': 15.00,
# #     'No_of_Shares': 10000.00,
# # }]
# # updated_rows = insert_stock_data(stock_data)
# # print(updated_rows)